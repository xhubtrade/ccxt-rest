{
  "stats": {
    "suites": 8,
    "tests": 18,
    "passes": 18,
    "pending": 0,
    "failures": 0,
    "start": "2021-04-27T16:42:01.214Z",
    "end": "2021-04-27T16:42:01.717Z",
    "duration": 503,
    "testsRegistered": 18,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "3cad66ed-1da3-4df6-bc95-a57195601c33",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "1a04cf9b-7a92-48a5-93fc-6bc4ccf8954b",
        "title": "> controllers",
        "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
        "file": "/test/api/controllers/exchange.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "> controllers \"before all\" hook",
            "timedOut": false,
            "duration": 297,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (fs.existsSync('./out/database.sqlite3')) {\n  fs.unlinkSync('./out/database.sqlite3')\n}\nreturn new Promise((resolve) => {\n  ccxtServer.start(_server => {\n    server = _server\n    resolve();\n  })  \n})",
            "err": {},
            "isRoot": false,
            "uuid": "ce53c6be-152a-4528-a49c-43f8a366ab03",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [
          {
            "title": "\"after all\" hook",
            "fullTitle": "> controllers \"after all\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "if (server) {\n  server.close()\n}\nif (fs.existsSync('./out/database.sqlite3')) {\n  fs.unlinkSync('./out/database.sqlite3')\n}",
            "err": {},
            "isRoot": false,
            "uuid": "be1ab3a6-b4e2-4634-91c5-5f1b54cf0000",
            "isHook": true,
            "skipped": false
          }
        ],
        "tests": [],
        "suites": [
          {
            "uuid": "ce25209b-ade3-4c2a-921b-8f64f9bf1700",
            "title": "> exchanges",
            "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
            "file": "/test/api/controllers/exchange.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "af707194-3b52-4c78-b741-d6598612520d",
                "title": "> GET /exchanges",
                "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                "file": "/test/api/controllers/exchange.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [
                  {
                    "title": "> should return list of exchanges",
                    "fullTitle": "> controllers > exchanges > GET /exchanges > should return list of exchanges",
                    "timedOut": false,
                    "duration": 26,
                    "state": "passed",
                    "speed": "fast",
                    "pass": true,
                    "fail": false,
                    "pending": false,
                    "code": "request(server)\n          .get('/exchanges')\n          .expect('Content-Type', /json/)\n          .expect(200)\n          .end(function(err, res) {\n            should.not.exist(err);\n            res.body.should.eql(exchangeConfig.exchanges.map(i => '' + i));\n            done();\n          });",
                    "err": {},
                    "isRoot": false,
                    "uuid": "546c5f3d-7952-4ad7-9bc0-5fad796c321e",
                    "isHook": false,
                    "skipped": false
                  }
                ],
                "suites": [],
                "passes": [
                  "546c5f3d-7952-4ad7-9bc0-5fad796c321e"
                ],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 26,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          },
          {
            "uuid": "6a2cca2e-44ff-47cf-b2b6-0d9de8133a3c",
            "title": "> exchange",
            "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
            "file": "/test/api/controllers/exchange.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [],
            "suites": [
              {
                "uuid": "184dd1ab-cb5f-4881-a67b-42f919f09d6f",
                "title": "> Given unsupported exchange name",
                "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                "file": "/test/api/controllers/exchange.js",
                "beforeHooks": [],
                "afterHooks": [],
                "tests": [],
                "suites": [
                  {
                    "uuid": "f54aab2f-c881-4567-a781-ce9e1604a80d",
                    "title": "> [Unsupported Exchange name] Exchange Management API",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange name] Exchange Management API > GET:/exchange/nonExistentExchangeName then return 404",
                        "timedOut": false,
                        "duration": 17,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .get('/exchange/nonExistentExchangeName')\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "348accad-3887-493d-89ff-91a31690cff2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> POST:/exchange/nonExistentExchangeName then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange name] Exchange Management API > POST:/exchange/nonExistentExchangeName then return 404",
                        "timedOut": false,
                        "duration": 25,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .post('/exchange/nonExistentExchangeName')\n  .send({id:'nonExistentExchangeName1'})\n  .set('Accept', 'application/json')\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "731d5935-0970-4b07-b3bd-8102c5b20210",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "348accad-3887-493d-89ff-91a31690cff2",
                      "731d5935-0970-4b07-b3bd-8102c5b20210"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 42,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "67fa20d5-2440-47a5-9a55-f8667bfa4082",
                    "title": "> [Unsupported Exchange Name] Public Data API",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/markets then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/markets then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n              .get('/exchange/nonExistentExchangeName/markets')\n              .expect('Content-Type', /json/)\n              .expect(404)\n              .end((err, res) => {\n                should.not.exist(err);\n                done();\n              })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "d45e09a2-dc7e-4c79-908a-89f5b97f654e",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/orderBook then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/orderBook then return 404",
                        "timedOut": false,
                        "duration": 10,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS);\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/orderBook')\n    .query({ symbol: 'BTC/ETH' })\n    .set('Accept', 'application/json')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "067bb767-80f8-4660-8e51-e1cd0811f470",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/l2OrderBook then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/l2OrderBook then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS);\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/l2OrderBook')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e95e037d-56cb-4c6d-808f-25a3b00e45d1",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/trades then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/trades then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/trades')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b98cf89a-23e9-467f-b56c-b5928d4166a9",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/ticker then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/ticker then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/ticker')\n    .query({ symbol: 'BTC/ETH' })\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "92039a98-28ed-4412-9410-bf4ce43eadba",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/tickers then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > GET:/exchange/nonExistentExchangeName/tickers then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/tickers')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "8e6e0ed2-0675-44a5-ace6-2bc0e9536e37",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> POST:/exchange/nonExistentExchangeName/_/loadMarkets then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Public Data API > POST:/exchange/nonExistentExchangeName/_/loadMarkets then return 404",
                        "timedOut": false,
                        "duration": 8,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .post('/exchange/nonExistentExchangeName/_/loadMarkets')\n    .type('text')\n    .send(JSON.stringify([true]))\n    .set('Accept', 'application/json')\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "26563b35-f9f5-403a-aac6-c31a49d2b4b5",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "d45e09a2-dc7e-4c79-908a-89f5b97f654e",
                      "067bb767-80f8-4660-8e51-e1cd0811f470",
                      "e95e037d-56cb-4c6d-808f-25a3b00e45d1",
                      "b98cf89a-23e9-467f-b56c-b5928d4166a9",
                      "92039a98-28ed-4412-9410-bf4ce43eadba",
                      "8e6e0ed2-0675-44a5-ace6-2bc0e9536e37",
                      "26563b35-f9f5-403a-aac6-c31a49d2b4b5"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 52,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  },
                  {
                    "uuid": "334e7c20-dbaa-44ee-ae9e-d23252f001a9",
                    "title": "> [Unsupported Exchange Name] Private Data APIs",
                    "fullFile": "/home/travis/build/ccxt-rest/ccxt-rest/test/api/controllers/exchange.js",
                    "file": "/test/api/controllers/exchange.js",
                    "beforeHooks": [],
                    "afterHooks": [],
                    "tests": [
                      {
                        "title": "> GET:/exchange/nonExistentExchangeName/balances then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > GET:/exchange/nonExistentExchangeName/balances then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n    .get('/exchange/nonExistentExchangeName/balances')\n    .expect('Content-Type', /json/)\n    .expect(404)\n    .end((err, res) => {\n      should.not.exist(err);\n      done();\n    })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "e0184c2b-1db4-4586-8fcf-445a31cf01ff",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Place order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Place order then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .post('/exchange/nonExistentExchangeName/order')\n  .send({ symbol: 'BTC/ETH', type: 'limit', side: 'buy', amount:0, price:0 })\n  .set('Accept', 'application/json')\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "bd5408dc-8796-4c4e-af87-b60d136e89b8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Cancel order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Cancel order then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "request(server)\n  .delete('/exchange/nonExistentExchangeName/order/dummy')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "93916a0c-e3a2-4494-8cd7-5529c22093bc",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get order then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get order then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/order/dummy')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "b9ccc61d-af04-4cd8-af0c-c0a32d780890",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get orders then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "1e6ca06c-4f08-480e-9844-ea91125983b8",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get open orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get open orders then return 404",
                        "timedOut": false,
                        "duration": 7,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders/open')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "192552a1-1b5c-47d0-b8ca-8d3da06e9e8b",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get closed orders then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get closed orders then return 404",
                        "timedOut": false,
                        "duration": 6,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/orders/closed')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "813a2b2f-a618-4448-bf62-37ac2e0a5cf2",
                        "isHook": false,
                        "skipped": false
                      },
                      {
                        "title": "> [Unsupported Exchange Name] Get my trades then return 404",
                        "fullTitle": "> controllers > exchange > Given unsupported exchange name > [Unsupported Exchange Name] Private Data APIs > [Unsupported Exchange Name] Get my trades then return 404",
                        "timedOut": false,
                        "duration": 9,
                        "state": "passed",
                        "speed": "fast",
                        "pass": true,
                        "fail": false,
                        "pending": false,
                        "code": "this.timeout(TIMEOUT_MS)\nrequest(server)\n  .get('/exchange/nonExistentExchangeName/trades/mine')\n  .query({symbol : 'BTC/ETH'})\n  .expect('Content-Type', /json/)\n  .expect(404)\n  .end((err, res) => {\n    should.not.exist(err);\n    done();\n  })",
                        "err": {},
                        "isRoot": false,
                        "uuid": "5f0676d2-cdf2-46d8-9e7a-d8fa4fc8ca31",
                        "isHook": false,
                        "skipped": false
                      }
                    ],
                    "suites": [],
                    "passes": [
                      "e0184c2b-1db4-4586-8fcf-445a31cf01ff",
                      "bd5408dc-8796-4c4e-af87-b60d136e89b8",
                      "93916a0c-e3a2-4494-8cd7-5529c22093bc",
                      "b9ccc61d-af04-4cd8-af0c-c0a32d780890",
                      "1e6ca06c-4f08-480e-9844-ea91125983b8",
                      "192552a1-1b5c-47d0-b8ca-8d3da06e9e8b",
                      "813a2b2f-a618-4448-bf62-37ac2e0a5cf2",
                      "5f0676d2-cdf2-46d8-9e7a-d8fa4fc8ca31"
                    ],
                    "failures": [],
                    "pending": [],
                    "skipped": [],
                    "duration": 54,
                    "root": false,
                    "rootEmpty": false,
                    "_timeout": 2000
                  }
                ],
                "passes": [],
                "failures": [],
                "pending": [],
                "skipped": [],
                "duration": 0,
                "root": false,
                "rootEmpty": false,
                "_timeout": 2000
              }
            ],
            "passes": [],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 0,
            "root": false,
            "rootEmpty": false,
            "_timeout": 2000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2021
}